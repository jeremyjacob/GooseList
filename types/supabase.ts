/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Groceries": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Groceries.id"];
          created_at?: parameters["rowFilter.Groceries.created_at"];
          list?: parameters["rowFilter.Groceries.list"];
          name?: parameters["rowFilter.Groceries.name"];
          quantity?: parameters["rowFilter.Groceries.quantity"];
          unit?: parameters["rowFilter.Groceries.unit"];
          creator?: parameters["rowFilter.Groceries.creator"];
          checked?: parameters["rowFilter.Groceries.checked"];
          checked_at?: parameters["rowFilter.Groceries.checked_at"];
          /** Image URL */
          image?: parameters["rowFilter.Groceries.image"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Groceries"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Groceries */
          Groceries?: definitions["Groceries"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Groceries.id"];
          created_at?: parameters["rowFilter.Groceries.created_at"];
          list?: parameters["rowFilter.Groceries.list"];
          name?: parameters["rowFilter.Groceries.name"];
          quantity?: parameters["rowFilter.Groceries.quantity"];
          unit?: parameters["rowFilter.Groceries.unit"];
          creator?: parameters["rowFilter.Groceries.creator"];
          checked?: parameters["rowFilter.Groceries.checked"];
          checked_at?: parameters["rowFilter.Groceries.checked_at"];
          /** Image URL */
          image?: parameters["rowFilter.Groceries.image"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Groceries.id"];
          created_at?: parameters["rowFilter.Groceries.created_at"];
          list?: parameters["rowFilter.Groceries.list"];
          name?: parameters["rowFilter.Groceries.name"];
          quantity?: parameters["rowFilter.Groceries.quantity"];
          unit?: parameters["rowFilter.Groceries.unit"];
          creator?: parameters["rowFilter.Groceries.creator"];
          checked?: parameters["rowFilter.Groceries.checked"];
          checked_at?: parameters["rowFilter.Groceries.checked_at"];
          /** Image URL */
          image?: parameters["rowFilter.Groceries.image"];
        };
        body: {
          /** Groceries */
          Groceries?: definitions["Groceries"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Lists": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Lists.id"];
          created_at?: parameters["rowFilter.Lists.created_at"];
          last_modified?: parameters["rowFilter.Lists.last_modified"];
          /** Owner of the List */
          owner?: parameters["rowFilter.Lists.owner"];
          name?: parameters["rowFilter.Lists.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Lists"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Lists */
          Lists?: definitions["Lists"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Lists.id"];
          created_at?: parameters["rowFilter.Lists.created_at"];
          last_modified?: parameters["rowFilter.Lists.last_modified"];
          /** Owner of the List */
          owner?: parameters["rowFilter.Lists.owner"];
          name?: parameters["rowFilter.Lists.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Lists.id"];
          created_at?: parameters["rowFilter.Lists.created_at"];
          last_modified?: parameters["rowFilter.Lists.last_modified"];
          /** Owner of the List */
          owner?: parameters["rowFilter.Lists.owner"];
          name?: parameters["rowFilter.Lists.name"];
        };
        body: {
          /** Lists */
          Lists?: definitions["Lists"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  Groceries: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: bigint */
    list?: number;
    /** Format: text */
    name?: string;
    /** Format: bigint */
    quantity?: number;
    /** Format: text */
    unit?: string;
    /** Format: uuid */
    creator?: string;
    /**
     * Format: boolean
     * @default false
     */
    checked?: boolean;
    /** Format: timestamp with time zone */
    checked_at?: string;
    /**
     * Format: text
     * @description Image URL
     */
    image?: string;
  };
  Lists: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    last_modified?: string;
    /**
     * Format: uuid
     * @description Owner of the List
     */
    owner?: string;
    /** Format: text */
    name?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description Groceries */
  "body.Groceries": definitions["Groceries"];
  /** Format: bigint */
  "rowFilter.Groceries.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.Groceries.created_at": string;
  /** Format: bigint */
  "rowFilter.Groceries.list": string;
  /** Format: text */
  "rowFilter.Groceries.name": string;
  /** Format: bigint */
  "rowFilter.Groceries.quantity": string;
  /** Format: text */
  "rowFilter.Groceries.unit": string;
  /** Format: uuid */
  "rowFilter.Groceries.creator": string;
  /** Format: boolean */
  "rowFilter.Groceries.checked": string;
  /** Format: timestamp with time zone */
  "rowFilter.Groceries.checked_at": string;
  /**
   * Format: text
   * @description Image URL
   */
  "rowFilter.Groceries.image": string;
  /** @description Lists */
  "body.Lists": definitions["Lists"];
  /** Format: bigint */
  "rowFilter.Lists.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.Lists.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.Lists.last_modified": string;
  /**
   * Format: uuid
   * @description Owner of the List
   */
  "rowFilter.Lists.owner": string;
  /** Format: text */
  "rowFilter.Lists.name": string;
}

export interface operations {}

export interface external {}
